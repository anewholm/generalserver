//platform agnostic file
#ifndef _XMLADMINISTRATIONQUERYENVIRONMENT_H
#define _XMLADMINISTRATIONQUERYENVIRONMENT_H

#include "IXml/IXmlQueryEnvironment.h" //direct inheritance
#include "MemoryLifetimeOwner.h"  //direct inheritance
#include "IXml/IXmlBaseDoc.h"          //usage in header file in-line functions
#include "IXml/IXmlLibrary.h"          //usage in header file in-line functions
#include "QueryEnvironment/AdminSecurityContext.h" //has-a
#include "Exceptions.h"

namespace general_server {
  interface_class IXslModuleManager;
  interface_class IXslTransformContext;
  interface_class IXslXPathFunctionContext;
  interface_class IXmlBaseNode;

  //-------------------------------------------------------------------------------------------
  //-------------------------------------------------------------------------------------------
  //-------------------------------------------------------------------------------------------
  //external to Database admin use by:
  //  Xml level (XmlBaseDoc, ...)
  //  application level (TXml, Repository, ...)
  //  NOT generated by the Database object
  //  has a const IXmlBasDoc meaning that some node creation and doc cache update changes are not possible
  //for things like:
  //  commit process
  //  toString() reporting,
  //  TXml serialisation
  //  hardlink translation
  //  uniqueXPaths with ancestor, parent and sibling calls
  //  transient areas with attributeValue calls
  //CANNOT do transforms or anything that requires node factories etc.
  //  because it contains a const doc
  //  and was not generated by the DataBase
  class XmlAdminQueryEnvironment: virtual public MemoryLifetimeOwner, implements_interface IXmlQueryEnvironment {
    const IXmlBaseDoc    *m_pSingularDocumentContext;
    IXmlSecurityContext  *m_pSec;
    IXslTransformContext *m_pTransformContext;
    IXmlMaskContext      *m_pMask;
    IXmlGrammarContext   *m_pGrammar;       //LibXML2: ctxt->gp       ->param = pQueryEnvironment
    IXmlXPathProcessingContext *m_pXPathProcessingContext;

  public:
    XmlAdminQueryEnvironment(const IMemoryLifetimeOwner *pMemoryLifetimeOwner, const IXmlBaseDoc *pSingularDocumentContext, IXmlSecurityContext *pSec = NULL, IXslTransformContext *pTransformContext = NULL);
    ~XmlAdminQueryEnvironment();
    const char *toString() const;
    const IXmlBaseDoc *changeSingularDocumentContext(const IXmlBaseDoc *pNewDoc);

    //--------------------------------------- inheritance
    IXmlQueryEnvironment *inherit(IXslDoc *pNewStylesheet = 0) const;
    IXmlQueryEnvironment *inherit(IXslModuleManager *pNewEMO)  const;
    bool inherited() const; //is this an inherited environment

    //--------------------------------------- component access
    IXmlSecurityContext  *securityContext()  const; //required security context
    IXmlTriggerContext   *triggerContext()   const;
    IXmlMaskContext      *maskContext()      const;
    IXmlGrammarContext   *grammarContext()   const;
    IXmlXPathProcessingContext *xpathProcessingContext() const;
    IXslModuleManager    *emoContext()       const;
    IXmlDebugContext     *debugContext()     const;
    IXmlDebugContext     *debugContext(IXmlDebugContext *pDebug);
    IXslTransformContext *transformContext() const;
    IXslXPathFunctionContext *newXPathContext(const IXmlBaseNode *pCurrentNode = 0, const char *sXPath = 0) const;

    //--------------------------------------- generic environment uses (conveinience)
    const IXmlLibrary *xmlLibrary()      const;

    //--------------------------------------- pre-execution requirements
    const IXmlBaseDoc *singularDocumentContext() const;
    bool               isMultiDocumentEnvironment() const {return false;}
    IXmlProfiler  *profiler()    const;
    void addNode(const IXmlBaseNode *pNode ATTRIBUTE_UNUSED) const {}
    const XmlNodeList<const IXmlBaseNode> *nodes() const {return 0;}
    void reportNodes(const XmlNodeList<const IXmlBaseNode> *pNodes ATTRIBUTE_UNUSED) const {}

    //--------------------------------------- debug
    void setXSLTTraceFlags(IXmlLibrary::xsltTraceFlag iFlags) const;
    void clearXSLTTraceFlags() const;
    void setXMLTraceFlags(IXmlLibrary::xmlTraceFlag iFlags) const;
    void clearXMLTraceFlags() const;
    const char *currentParentRoute() const;
    const char *currentXSLCommandXPath() const;
    const char *currentSourceNodeXPath() const;
  };
}

#endif
