<xsl:stylesheet xmlns:repository="http://general_server.org/xmlnamespaces/repository/2006" xmlns:user="http://general_server.org/xmlnamespaces/user/2006" xmlns:xxx="http://general_server.org/xmlnamespaces/dummyxsl/2006" xmlns:database="http://general_server.org/xmlnamespaces/database/2006" xmlns="http://www.w3.org/1999/xhtml" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:gs="http://general_server.org/xmlnamespaces/general_server/2006" extension-element-prefixes="dyn str regexp database server request flow debug repository user" response:server-side-only="true" name="website_classes_all_templates" version="1.0">
  <!-- this is a DXSL stylesheet
    its xsl:template contents are generated by the main @mode=gs_generate_XSL xsl:template
    it compiles all $gs_website_class templates together
  -->
  <xsl:namespace-alias stylesheet-prefix="xxx" result-prefix="xsl"/>

  <!-- xsl:include xpath="~XSLStylesheet/inheritance_render"/ -->
  <xsl:include xpath="~XSLTemplate/inheritance_render"/>

  <!-- output checks -->
  <xsl:include xpath="~XSLStylesheet/code_render"/>
  <xsl:include xpath="~XSL/code_render"/>

  <xsl:template match="xsl:stylesheet" mode="gs_generate_XSL">
    <xsl:comment>
      ######## gs_complementary_templates #########
      $gs_website_classes       [<xsl:value-of select="count($gs_website_classes)"/>]
      $gs_all_class_stylesheets [<xsl:value-of select="count($gs_all_class_stylesheets)"/>]
      xsl:template/@match attributes have been morphed to include all derived class:*/@elements
      type:             [complement]
    </xsl:comment>
    <xsl:if test="count($gs_website_classes) = 0"><debug:server-message output="no website classes only found during XSL inclusion" type="warning"/></xsl:if>
    <debug:server-message if="$gs_debug_url_steps" output="object:Request [{$gs_request/gs:message_type}] gs_complementary_templates [{count($gs_website_classes)}]"/>

    <!-- checks -->
    <xsl:apply-templates select="$gs_all_class_stylesheets" mode="gs_client_side_xsl_output_checks"/>

    <!-- i.e. only the global HTTP/client_environment_variables.xsl -->
    <xsl:copy-of select="$gs_all_class_stylesheets/xsl:param|$gs_all_class_stylesheets/xsl:variable"/>

    <!-- here we morph the xsl:template @match attributes to include derived @elements
      xsl:template contents are COPIED directly. they should NOT be altered.
      xsl:template/@meta:output-order: lowest first, highest last (takes precedence)
    -->
    <xsl:apply-templates select="$gs_all_class_stylesheets/xsl:template" mode="gs_inheritance_render_xsl">
      <xsl:sort select="@meta:output-order"/>
    </xsl:apply-templates>

    <!-- slower old class by class basis template -->
    <!-- xsl:apply-templates select="$gs_website_classes" mode="gs_complementary_templates"/ -->
  </xsl:template>
</xsl:stylesheet>
